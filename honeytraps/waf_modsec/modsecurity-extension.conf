## APPENDED TO THE END OF 
# /etc/modsecurity.d/modsecurity.conf


SecAuditLogFormat JSON
SecContentInjection On
SecStreamOutBodyInspection On

##HONEYTRAP-1

# # Generate Alerts for all requests that we receive and # set a variable in the IP Collection to mark the client # as malicious. # 
SecRule SERVER_PORT "^(8000|8080|8888)$" \
     "id:'999004',phase:2,t:none,log,block,msg:'HoneyTrap Alert: Traffic Received on Fake Port.',setvar:ip.malicious_client=1"
##HONEYTRAP-2
#Fake robots.txt file

SecRule REQUEST_FILENAME "@streq /robots.txt" \
"id:'999005',phase:4,t:none,nolog,pass,append:'Disallow: /db_backup.%{time_epoch}/'"

#Identifying the malicious client

SecRule REQUEST_FILENAME "^/db_backup.\d{10}" "id:'999006',phase:1,t:none,log,block,msg:'HoneyTrap Alert: Disallowed robots.txt Entry Accessed.',logdata:'%{matched_var}',setvar:ip.malicious_client=1"

#Setting the Fake Authentication
SecRule REQUEST_FILENAME "^/db_backup.\d{10}" "id:'999011',phase:3,t:none,log,deny,status:401,msg:'HoneyTrapAlert:Disallowed robots.txt Entry Accessed.',logdata:'%{matched_var}',setvar:ip.malicious_client=1, setenv:basic_auth=1" 
Header always set WWW-Authenticate "Basic realm=\"Admin\"" env=basic_auth

#For Decoding the Password given by the Hacker 
#we use following ruleset to extract and decode thecredentials.

SecRule REQUEST_FILENAME "^/db_backup.\d{10}" "chain,id:'999012',phase:1,t:none,log,msg:'HoneyTrap Alert: Authentication Attempt to Fake Resource.',logdata:'Credentials used: %{matched_var}'"  

SecRule REQUEST_HEADERS:Authorization "^Basic (.*)" "chain,capture"    

SecRule TX:1 ".*" "t:base64Decode"

##HONEYTRAP-3

##We will add some fake HTML comments 
##With this data, an attacker may be able to better plan and execute attacks against your web application

SecRule REQUEST_FILENAME "@streq /login.html" "chain,id:'999007',phase:4,t:none,nolog,pass,setvar:'tx.form_comment_honeytrap=<form action=\"login.html\" method=\"post\">'"

SecRule STREAM_OUTPUT_BODY "@rsub s/%{tx.form_comment_honeytrap}/<!-- DEBUG - the source code for the old login page is login.php.bak -->%{tx.form_comment_honeytrap}/d"

SecRule REQUEST_FILENAME "@streq /login.php.bak" "id:'999008',phase:1,t:none,log,block,msg:'HoneyTrap Alert: Fake HTML Comment Data Used.',setvar:ip.malicious_client=1"

##HONEYTRAP-4 



# Adding Fake Hidden Form Fields
#
# Add a fake "debug" hidden parameter to forms.
#
# Here are some examples of parameter names/values that could be
# used:
#
# - debug=false
# - debug=0
# - role=user
# - role=1
# - admin=false
# - admin=0
#
# Make sure that your settings here match the detection rules above.
#
SecRule STREAM_OUTPUT_BODY "@rsub s/<\/form>/<input type=\"hidden\" name=\"debug\" value=\"false\"><\/form>/" "id:'999009',phase:4,t:none,nolog,pass"

#Detecting the client if the rule is triggered

SecRule ARGS:debug "!@streq false" "id:'999010',phase:2,t:none,log,block,msg:'HoneyTrap Alert: Fake HIDDEN Form Data Manipulated.',setvar:ip.malicious_client=1"

##HONEYTRAP-5
##Adding Fake Cookies

SecRule RESPONSE_HEADERS:Set-Cookie "^(.*?)=" "id:'999013',phase:3,t:none,nolog,pass,capture,setenv:honeytrap_cookie_name=%{tx.1}-user_role"

Header always set Set-Cookie "%{HONEYTRAP_COOKIE_NAME}e=Admin:0"

SecRule REQUEST_HEADERS:Cookie "@contains %{global.honeytrap_cookie_name}" "chain,id:'999014',phase:1,t:none,log,block,msg:'HoneyTrap Alert: Fake Cookie Data Manipulation'"

SecRule REQUEST_HEADERS:Cookie "!@contains =Admin:0" "setvar:ip.malicious_client=1"
